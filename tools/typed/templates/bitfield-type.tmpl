#*
# Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
#
# 2019 Cog Systems Pty Ltd.
#
# SPDX-License-Identifier: BSD-3-Clause
*#

#set unit_postfix=''
#if $unit_cnt > 1
#set unit_postfix=' x{:d}'.format($unit_cnt)
#end if
// Bitfield: $type_name <${unit_type}${unit_postfix}>
typedef struct ${type_name} {
#set decs = []
#for $d in $declarations:
#if $d.field_maps
#set decs+=[$d]
#end if
#end for
#for $d in sorted($decs, key=lambda x: x.field_maps[0]):
#if $d.is_ignore
#continue
#end if
#set sep=''
#set maps=''
#for $map in sorted($d.field_maps, key=lambda x: -x.field_bit)
#set maps+=$sep
#if $map.length == 1
#set maps+='{:d}'.format($map.mapped_bit)
#else
#set maps+='{:d}:{:d}'.format($map.mapped_bit+$map.length-1,$map.mapped_bit)
#end if
#set sep=','
#end for
	// ${'{:9s}'.format($maps)} $d.compound_type.gen_declaration($d.field_name)
#end for
	${unit_type} bf[${unit_cnt}];
} ${type_name}_t;

## These accessors are macros rather than inline functions so they can be used
## in contexts that require constant expressions, e.g. in case labels.
#define ${type_name}_default() \
	(${type_name}_t){ .bf = { #slurp
${', '.join(str(v) for v in $init_values)} } }

#define ${type_name}_cast(#slurp
#for i in range($unit_cnt)
#if i
, #slurp
#end if
val_$i#slurp
#end for
) (${type_name}_t){ .bf = { #slurp
#for i in range($unit_cnt)
#if i
, #slurp
#end if
val_$i#slurp
#end for
} }

#if $unit_cnt == 1
${unit_type}
${type_name}_raw(${type_name}_t bit_field);

_Atomic ${unit_type} *
${type_name}_atomic_ptr_raw(_Atomic ${type_name}_t *ptr);

#end if
void
${type_name}_init(${type_name}_t *bit_field);

${type_name}_t
${type_name}_clean(${type_name}_t val);

bool
${type_name}_is_equal(${type_name}_t b1, ${type_name}_t b2);

#if $has_set_ops
// Union of boolean fields of two ${type_name}_t values
#if not $all_fields_boolean
//
// Note: non-boolean fields are preserved from the left-hand argument, and
// discarded from the right-hand argument.
#end if
${type_name}_t
${type_name}_union(${type_name}_t b1, ${type_name}_t b2);

// Intersection of boolean fields of two ${type_name}_t values
#if not $all_fields_boolean
//
// Note: non-boolean fields are preserved from the left-hand argument, and
// discarded from the right-hand argument.
#end if
${type_name}_t
${type_name}_intersection(${type_name}_t b1, ${type_name}_t b2);

// Invert all boolean fields in a ${type_name}_t value
#if not $all_fields_boolean
//
// Note: non-boolean fields are preserved.
#end if
${type_name}_t
${type_name}_inverse(${type_name}_t b);

// Set difference of boolean fields of two ${type_name}_t values
#if not $all_fields_boolean
//
// Note: non-boolean fields are preserved from the left-hand argument, and
// discarded from the right-hand argument.
#end if
${type_name}_t
${type_name}_difference(${type_name}_t b1, ${type_name}_t b2);
#if $unit_cnt == 1
#set mask = hex($boolean_masks[0])

// Atomically replace a ${type_name}_t value with the union of its boolean
// fields with a given ${type_name}_t value, and return the previous value.
#if not $all_fields_boolean
//
// Note: non-boolean fields are not modified.
#end if
${type_name}_t
${type_name}_atomic_union(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order);

// Atomically replace a ${type_name}_t value with the intersection of its
// boolean fields with a given ${type_name}_t value, and return the previous
// value.
#if not $all_fields_boolean
//
// Note: non-boolean fields are not modified.
#end if
${type_name}_t
${type_name}_atomic_intersection(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order);

// Atomically replace a ${type_name}_t value with the set difference of its
// boolean fields and a given ${type_name}_t value, and return the previous
// value.
#if not $all_fields_boolean
//
// Note: non-boolean fields are not modified.
#end if
${type_name}_t
${type_name}_atomic_difference(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order);
#end if
#end if
