// Automatically generated. Do not modify.
//
// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

\#pragma clang diagnostic push
\#pragma clang diagnostic ignored "-Wshorten-64-to-32"
\#pragma clang diagnostic ignored "-Wimplicit-int-conversion"

#def cast(t, v)
#if t.startswith('int') or t.startswith('uint')
(${t}_t)(${v})
#else
${t}_cast(${v})#slurp
#end if
#end def
#def raw(t, v)
#if t.startswith('int') or t.startswith('uint')
(register_t)(${v})
#else
${t}_raw(${v})#slurp
#end if
#end def

#def register_read(r, vt, vn, volatile, ordered)
#set $suffix = ""
#if volatile
#set $suffix = $suffix + "_volatile"
#end if
#if ordered
#set $suffix = $suffix + "_ordered"
#end if
static inline ${vt}_t
register_${vn}_read${suffix}(
#if ordered
asm_ordering_dummy_t *ordering_var
#else
void
#end if
)
{
	register_t val;
	__asm__
#if volatile
	volatile
#end if
		("mrs %0, $r.name	;"
		: "=r" (val)
#if ordered
		  , "+m"(*ordering_var)
#end if
	);
	return ${cast(vt, 'val')};
}

#end def

#def register_write(r, vt, vn, barrier, ordered)
#set $suffix = ""
#if barrier
#set $suffix = $suffix + "_barrier"
#end if
#if ordered
#set $suffix = $suffix + "_ordered"
#end if
static inline void
register_${vn}_write${suffix}(const ${vt}_t val
#if ordered
, asm_ordering_dummy_t *ordering_var
#end if
)
{
	register_t raw = (register_t)${raw(vt, 'val')};
	__asm__ volatile("msr $r.name, %[r]" :
#if ordered
		  "+m"(*ordering_var)
#end if
		: [r] "rz" (raw)
#if barrier
		: "memory"
#end if
	);
}
#end def

#for r in $registers
#for vn, vt in $r.variants
##
#if $r.is_readable
#if $r.need_non_ordered
${register_read(r, vt, vn, False, False)}
#end if
#if $r.need_ordered
${register_read(r, vt, vn, False, True)}
#end if
#end if
##
#if $r.is_volatile
#if $r.need_non_ordered
${register_read(r, vt, vn, True, False)}
#end if
#if $r.need_ordered
${register_read(r, vt, vn, True, True)}
#end if
#end if
##
#if $r.is_writable
#if $r.need_non_ordered
${register_write(r, vt, vn, False, False)}
#end if
#if $r.need_ordered
${register_write(r, vt, vn, False, True)}
#end if
#end if
##
#if $r.is_writeable_barrier
#if $r.need_non_ordered
${register_write(r, vt, vn, True, False)}
#end if
#if $r.need_ordered
${register_write(r, vt, vn, True, True)}
#end if
#end if
#end for
#end for

\#pragma clang diagnostic pop
