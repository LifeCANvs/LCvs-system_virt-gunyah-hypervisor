// Automatically generated. Do not modify.
//
// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

#if $public_only
\#include <guest_types.h>
#else
\#include <hyptypes.h>
#end if

// Bitfield Accessors

#for $definition in $definitions
#if $definition.category == "bitfield"
#set type_name=$definition.type_name
#set unit_cnt=$definition.unit_count
#set compare_masks=$definition.compare_masks
#set all_fields_boolean=$definition.all_fields_boolean
#set boolean_masks=$definition.boolean_masks
#set trivial = True
#for i in range($unit_cnt)
#if $compare_masks[$i] != 0
#set trivial = False
#end if
#end for

void
${type_name}_init(${type_name}_t *bit_field) {
       *bit_field = ${type_name}_default();
}

#if $unit_cnt == 1
${definition.unit_type}
${type_name}_raw(${type_name}_t bit_field) {
	return bit_field.bf[0];
}

_Atomic ${definition.unit_type} *
${type_name}_atomic_ptr_raw(_Atomic ${type_name}_t *ptr) {
	return (_Atomic ${definition.unit_type} *)&((${type_name}_t *)ptr)->bf[0];
}

#end if
${type_name}_t
${type_name}_clean(${type_name}_t val) {
#if trivial
       (void)val;
#end if
       return (${type_name}_t) { .bf = { #slurp
#for i in range($unit_cnt)
#if $compare_masks[$i] != 0
#set mask = hex($compare_masks[$i])
               val.bf[$i] & ${mask}U,
#else
               0,
#end if
#end for
       } };
}

bool
${type_name}_is_equal(${type_name}_t b1, ${type_name}_t b2) {
#if trivial
       (void)b1;
       (void)b2;
#end if
       return#slurp
#set sep = ''
#for i in range($unit_cnt)
#if $compare_masks[$i] != 0
#set mask = hex($compare_masks[$i])
       $sep ((b1.bf[$i] & ${mask}U) == (b2.bf[$i] & ${mask}U))
#set sep = '&&'
#end if
#end for
#if trivial
       true
#end if
       ;
}

#if $definition.has_set_ops
#set bool_trivial=True
#for i in range($unit_cnt)
#if $all_fields_boolean
#set bool_trivial = False
#elif $boolean_masks[$i] != 0
#set bool_trivial = False
#end if
#end for
${type_name}_t
${type_name}_union(${type_name}_t b1, ${type_name}_t b2)
{
#if bool_trivial
       (void)b2;
#end if
       return (${type_name}_t){ .bf = { #slurp
#for i in range($unit_cnt)
#if $all_fields_boolean
               b1.bf[$i] | b2.bf[$i],
#elif $boolean_masks[$i] != 0
#set mask = hex($boolean_masks[$i])
               b1.bf[$i] | (b2.bf[$i] & ${mask}U),
#else
               b1.bf[$i],
#end if
#end for
       } };
}

${type_name}_t
${type_name}_intersection(${type_name}_t b1, ${type_name}_t b2)
{
#if bool_trivial
       (void)b2;
#end if
       return (${type_name}_t){ .bf = { #slurp
#for i in range($unit_cnt)
#if $all_fields_boolean
               b1.bf[$i] & b2.bf[$i],
#elif $boolean_masks[$i] != 0
#set mask = hex($boolean_masks[$i])
               b1.bf[$i] & (b2.bf[$i] | ~($definition.unit_type)${mask}U),
#else
               b1.bf[$i],
#end if
#end for
       } };
}

${type_name}_t
${type_name}_inverse(${type_name}_t b)
{
       return (${type_name}_t){ .bf = { #slurp
#for i in range($unit_cnt)
#if $all_fields_boolean
               ~b.bf[$i],
#elif $boolean_masks[$i] != 0
#set mask = hex($boolean_masks[$i])
               b.bf[$i] ^ ${mask}U,
#else
               b.bf[$i],
#end if
#end for
       } };
}

${type_name}_t
${type_name}_difference(${type_name}_t b1, ${type_name}_t b2)
{
       ${type_name}_t not_b2 = ${type_name}_inverse(b2);
       return ${type_name}_intersection(b1, not_b2);
}

${type_name}_t
${type_name}_atomic_union(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order)
{
       _Atomic ${definition.unit_type} *bf = (_Atomic ${definition.unit_type} *) & ((${type_name}_t *) b1)->bf[0];
       return (${type_name}_t){ .bf = { #slurp
#if $all_fields_boolean
               atomic_fetch_or_explicit(bf, b2.bf[0], order)
#else
               atomic_fetch_or_explicit(bf, b2.bf[0] & ${mask}U, order)
#end if
       } };
}

${type_name}_t
${type_name}_atomic_intersection(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order)
{
       _Atomic ${definition.unit_type} *bf = (_Atomic ${definition.unit_type} *) & ((${type_name}_t *) b1)->bf[0];
       return (${type_name}_t){ .bf = { #slurp
#if $all_fields_boolean
               atomic_fetch_and_explicit(bf, b2.bf[0], order)
#else
               atomic_fetch_and_explicit(bf, b2.bf[0] | ~($definition.unit_type)${mask}U, order)
#end if
       } };
}

${type_name}_t
${type_name}_atomic_difference(_Atomic ${type_name}_t *b1, ${type_name}_t b2, memory_order order)
{
       ${type_name}_t not_b2 = ${type_name}_inverse(b2);
       return ${type_name}_atomic_intersection(b1, not_b2, order);
}

#end if
#for $dec in $definition._all_declarations:
#if not $dec.is_ignore
#set field_type = $dec.compound_type.gen_type_name(unqualified=True)
#if $dec.is_nested_bitfield
#set field_type_name = $dec.compound_type.type_name
#set field_unit_type = $dec.compound_type.definition.unit_type
#set val_expr = $field_type_name + '_raw(val)'
#else
#set val_expr = 'val'
#end if
#if not $dec.is_const:
void ${dec.bf_type_name}_set_${dec.field_name}(${dec.bf_type_name}_t *bit_field, ${dec.compound_type.gen_declaration('val')}) {
	${dec.unit_type} *bf = (${dec.unit_type} *)bit_field;
#for $map in $dec.field_maps:
#set $m = (1 << $map.length) - 1
#set unit = $map.mapped_bit // $dec.unit_size
#set mapped_bit = $map.mapped_bit % $dec.unit_size
    bf[$unit] &= (${dec.unit_type})${hex(((2 ** dec.unit_size) - 1) ^ (m << $mapped_bit))}U;
    bf[$unit] |= ((((${dec.unit_type})${val_expr}) >> ${map.field_bit}U) & (${dec.unit_type})${hex(m)}U) << ${mapped_bit}U;
#end for
}

#end if
#if not $dec.is_writeonly:
${field_type}
${dec.bf_type_name}_get_${dec.field_name}(const ${dec.bf_type_name}_t *bit_field) {
    ${dec.unit_type} val = 0U;
    const ${dec.unit_type} *bf = (const ${dec.unit_type} *)&bit_field->bf[0];

#for $map in $dec.field_maps:
#set $m = (1 << $map.length) - 1
#set unit = $map.mapped_bit // $dec.unit_size
#set mapped_bit = $map.mapped_bit % $dec.unit_size
     val |= ((bf[$unit] >> ${mapped_bit}U) & (${dec.unit_type})${hex(m)}U) << ${map.field_bit}U;
#end for
#if $dec.field_signed
#set l=hex(1 << ($dec.field_length - 1)) + 'U'
    return (${field_type})((val ^ $l) - $l);
#else
#if not $dec.is_nested_bitfield
    return (${field_type})val;
#else
    return ${field_type_name}_cast((${field_unit_type})val);
#end if
#end if
}

#end if
#if not $dec.is_writeonly and not $dec.is_const
void ${dec.bf_type_name}_copy_${dec.field_name}(
        ${dec.bf_type_name}_t *bit_field_dst,
        const ${dec.bf_type_name}_t *bit_field_src)
{
    ${dec.unit_type} *bf_dst = (${dec.unit_type} *)&bit_field_dst->bf[0];
    const ${dec.unit_type} *bf_src = (const ${dec.unit_type} *)&bit_field_src->bf[0];
#for $map in $dec.field_maps:
#set mapped_bit = $map.mapped_bit % $dec.unit_size
#set m = hex(((1 << $map.length) - 1) << $mapped_bit)
#set unit = $map.mapped_bit // $dec.unit_size
    bf_dst[$unit] &= ~($dec.unit_type)${m}U;
    bf_dst[$unit] |= bf_src[$unit] & ($dec.unit_type)${m}U;
#end for
}

#end if
#end if
#end for
#end if
#end for
