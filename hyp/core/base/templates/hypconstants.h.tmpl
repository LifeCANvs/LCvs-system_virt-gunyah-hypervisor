// Automatically generated. Do not modify.
//
// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

// Struct and object member offsets

#def print_offsets(prefix, base, d)
#for $name, $type, $ofs in $d.layout
#set upper_name = $name.upper()
#set offset = base + ofs
#if not $type.is_array
\#define ${prefix}_${upper_name} $offset
#else
\#define ${prefix}_${upper_name}(n) ($offset + ($type.base_type.size * (n)))
#end if
#if $type != $type.basic_type
#set d = getattr($type.basic_type, 'definition', None)
#if $d and $d.is_container
#set p = prefix + '_' + $name.upper()
$print_offsets($p, $offset, $d)
#end if
#end if
#end for
#end def

#for $d in $definitions
#if $d.is_container
#set typename = $d.type_name.upper()
\#define ${typename}_SIZE $d.size
\#define ${typename}_ALIGN $d.alignment
#set prefix = 'OFS_' + typename
$print_offsets(prefix, 0, d)
#end if

#end for



// Enumeration constants

#for $d in $definitions
#if $d.category == "enumeration"
#set typename = $d.type_name.upper()
#for e in d.enumerators
#set name = $e.name.upper()
\#define ENUM_${typename}_${name} ${int($e.value)}
#end for

\#define ENUM_${typename}_MIN_VALUE ($d.minimum_value)
\#define ENUM_${typename}_MAX_VALUE ($d.maximum_value)
#end if

#end for

// Bitfield shifts and masks

#for $d in $definitions
#if $d.category == "bitfield"
#set typename = $d.type_name.upper()
#for dec in d.fields
#set map = $dec.field_maps[0]
#set field_name = $dec.field_name.upper()
#if $dec.field_name != "unknown" and $len($dec.field_maps) == 1
#set $mask = ((1 << $map.length) - 1) << $map.mapped_bit
\#define ${typename}_${field_name}_SHIFT (${map.mapped_bit}U)
\#define ${typename}_${field_name}_BITS (${map.length}U)
\#define ${typename}_${field_name}_MASK (${hex(mask)}U)
#end if
\#define ${typename}_${field_name}_PRESHIFT (${map.field_bit}U)
#end for
#end if

#end for

\#if defined(__ASSEMBLER__)
// Untyped constants (assembly only)

#for $d in $definitions
#if $d.category == "constant"
\#define ${d.type_name} ${int(d.value)}
#end if
#end for

\#endif // defined(__ASSEMBLER__)
