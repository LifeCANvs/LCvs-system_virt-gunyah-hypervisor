// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

#include <util.h>

define irq_t newtype uint32;

define GIC_SGI_BASE constant type irq_t = 0;
define GIC_SGI_NUM constant type count_t = 16;
define GIC_PPI_BASE constant type irq_t = GIC_SGI_BASE + GIC_SGI_NUM;
define GIC_PPI_NUM constant type count_t = 16;
define GIC_SPI_BASE constant type irq_t = GIC_PPI_BASE + GIC_PPI_NUM;
define GIC_SPI_NUM constant type count_t = 988;
define GIC_LPI_BASE constant type irq_t = 8192;
// There is no GIC_LPI_NUM constant because we are free to define it ourselves,
// up to the limit imposed by GICD_TYPER.IDbits (which may be very large)

define GIC_SPECIAL_INTIDS_BASE constant type irq_t =
	GIC_SPI_BASE + GIC_SPI_NUM;
define GIC_SPECIAL_INTIDS_NUM constant type count_t = 4;
define GIC_RES_BASE constant type irq_t =
	GIC_SPECIAL_INTIDS_BASE + GIC_SPECIAL_INTIDS_NUM;
define GIC_RES_NUM constant type count_t = 32;

define GIC_PPI_EXT_BASE constant type irq_t =
	GIC_RES_BASE + GIC_RES_NUM;
define GIC_PPI_EXT_NUM constant type count_t = 64;

define GIC_RES1_BASE constant type irq_t =
	GIC_PPI_EXT_BASE + GIC_PPI_EXT_NUM;
define GIC_RES1_NUM constant type count_t = 2976;

define GIC_SPI_EXT_BASE constant type irq_t =
	GIC_RES1_BASE + GIC_RES1_NUM;
define GIC_SPI_EXT_NUM constant type count_t = 1024;

// The highest possible priority for a secure (group 0) IRQ when performing a
// secure access to IPRIORITYR, or for a normal (group 1) IRQ when performing
// a non-secure access. Note that for non-secure accesses, all group 0 IRQs
// appear to be fixed at this priority, even though their real priority is
// higher.
define GIC_PRIORITY_HIGHEST constant uint8 = 0;

// The highest possible priority for a normal (group 1) IRQ when performing a
// secure access to IPRIORITYR, or for a virtual group 1 IRQ in ICH_LR<n>_EL2.
define GIC_PRIORITY_NORMAL constant uint8 = 0x80;

// The lowest possible priority for an IRQ, which prevents it ever being
// delivered. Note that some of the low bits may be cleared when reading back
// this value from IPRIORITYR; do not compare equality to this.
define GIC_PRIORITY_LOWEST constant uint8 = 0xff;

#define GICD_ARRAY_SIZE(n) \
	(util_balign_up((GIC_SPI_BASE + GIC_SPI_NUM), n) / n)
#define GICD_ARRAY_SIZE_EXT(n) \
	(util_balign_up(GIC_SPI_EXT_NUM, n) / n)

define gicd structure(aligned(PGTABLE_HYP_PAGE_SIZE)) {
	ctlr @ 0x0000		union GICD_CTLR(atomic);
	typer @ 0x0004		bitfield GICD_TYPER(atomic);
	iidr @ 0x0008		bitfield GICD_IIDR(atomic);
	statusr @ 0x0010	bitfield GICD_STATUSR(atomic);
	setspi_nsr @ 0x0040	bitfield GICD_CLRSPI_SETSPI_NSR_SR(atomic);
	clrspi_nsr @ 0x0048	bitfield GICD_CLRSPI_SETSPI_NSR_SR(atomic);
	setspi_sr @ 0x0050	bitfield GICD_CLRSPI_SETSPI_NSR_SR(atomic);
	clrspi_sr @ 0x0058	bitfield GICD_CLRSPI_SETSPI_NSR_SR(atomic);
	igroupr @ 0x0080	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	isenabler @ 0x0100	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	icenabler @ 0x0180	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	ispendr @ 0x0200	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	icpendr @ 0x0280	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	isactiver @ 0x0300	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	icactiver @ 0x0380	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	ipriorityr @ 0x0400	array(GICD_ARRAY_SIZE(1)) uint8(atomic);
	itargetsr @ 0x0800	array(GICD_ARRAY_SIZE(1)) uint8(atomic);
	icfgr @ 0x0C00		array(GICD_ARRAY_SIZE(16)) uint32(atomic);
	igrpmodr @ 0x0D00	array(GICD_ARRAY_SIZE(32)) uint32(atomic);
	nsacr @ 0x0E00		array(GICD_ARRAY_SIZE(16)) uint32(atomic);
	sgir @ 0x0F00		bitfield GICD_SGIR(atomic);
	cpendsgir @ 0x0F10	array(GICD_ARRAY_SIZE_EXT(64)) uint8(atomic);
	spendsgir @ 0x0F20	array(GICD_ARRAY_SIZE_EXT(64)) uint8(atomic);
	igroupr_e @ 0x1000	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	isenabler_e @ 0x1200	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	icenabler_e @ 0x1400	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	ispendr_e @ 0x1600	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	icpendr_e @ 0x1800	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	isactiver_e @ 0x1A00	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	icactiver_e @ 0x1C00	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	ipriorityr_e @ 0x2000	array(GICD_ARRAY_SIZE_EXT(1)) uint8(atomic);
	icfgr_e @ 0x3000	array(GICD_ARRAY_SIZE_EXT(16)) uint32(atomic);
	igrpmodr_e @ 0x3400	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	nsacr_e @ 0x3600	array(GICD_ARRAY_SIZE_EXT(32)) uint32(atomic);
	irouter @ 0x6100	array(GIC_SPI_NUM) bitfield GICD_IROUTER(atomic);
	irouter_e @ 0x8000	array(GIC_SPI_EXT_NUM) bitfield GICD_IROUTER(atomic);
};

// Instead of adding PIDR2 to the gicd structure above, define a separate
// constant for its offset. This is to avoid making the struct unnecessarily
// bloated.
define OFS_GICD_PIDR2 constant = 0xFFE8;

define gicr_rd_base structure(aligned(PGTABLE_HYP_PAGE_SIZE)) {
	ctlr @ 0x0000		bitfield GICR_CTLR(atomic);
	iidr @ 0x0004		bitfield GICR_IIDR(atomic);
	typer @ 0x0008		bitfield GICR_TYPER(atomic);
	statusr @ 0x0010	bitfield GICR_STATUSR(atomic);
	waker @ 0x0014		bitfield GICR_WAKER(atomic);
	setlpir @ 0x0040	bitfield GICR_CLRLPIR_INVLPIR_SETLPIR(atomic);
	clrlpir @ 0x0048	bitfield GICR_CLRLPIR_INVLPIR_SETLPIR(atomic);
	propbaser @ 0x0070	bitfield GICR_PROPBASER(atomic);
	pendbaser @ 0x0078	bitfield GICR_PENDBASER(atomic);
	invlpir @ 0x00A0	bitfield GICR_CLRLPIR_INVLPIR_SETLPIR(atomic);
	invallr @ 0x00B0	uint64(atomic);
	syncr @ 0x00C0		bitfield GICR_SYNCR(atomic);
};

#if GICV3_HAS_VLPI
define gicr_vlpi_base structure(aligned(PGTABLE_HYP_PAGE_SIZE)) {
	vpropbaser @ 0x0070	bitfield GICR_VPROPBASER(atomic);
	vpendbaser @ 0x0078	bitfield GICR_VPENDBASER(atomic);
};
#endif

define gicr_sgi_base structure(aligned(PGTABLE_HYP_PAGE_SIZE)) {
	reserved @ 0x0000	uint32(atomic);
	igroupr0 @ 0x0080	uint32(atomic);
	igroupr_e @ 0x0084	uint32(atomic);
	isenabler0 @ 0x0100	uint32(atomic);
	isenabler_e @ 0x0104	uint32(atomic);
	icenabler0 @ 0x0180	uint32(atomic);
	icenabler_e @ 0x0184	uint32(atomic);
	ispendr0 @ 0x0200	uint32(atomic);
	ispendr_e @ 0x0204	uint32(atomic);
	icpendr0 @ 0x0280	uint32(atomic);
	icpendr_e @ 0x0284	uint32(atomic);
	isactiver0 @ 0x0300	uint32(atomic);
	isactiver_e @ 0x0304	uint32(atomic);
	icactiver0 @ 0x0380	uint32(atomic);
	icactiver_e @ 0x0384	uint32(atomic);
	ipriorityr @ 0x0400	array(GIC_PPI_BASE + GIC_PPI_NUM) uint8(atomic);
	ipriorityr_e @ 0x0420	array(GIC_PPI_EXT_NUM) uint8(atomic);
	icfgr0 @ 0x0C00		uint32(atomic);
	icfgr1 @ 0x0C04		uint32(atomic);
	icfgr_e @ 0x0C08	uint32(atomic);
	igrpmodr0 @ 0x0D00	uint32(atomic);
	igrpmodr_e @ 0x0D04	uint32(atomic);
	nsacr @ 0x0E00		uint32(atomic);
};

define gicr structure(aligned(65536)) {
	rd @ 0	structure gicr_rd_base;
	PIDR2 @ 0xFFE8		uint32(atomic);
	sgi @ 0x10000	structure gicr_sgi_base;
#if GICV3_HAS_VLPI
	vlpi @ 0x20000	structure gicr_vlpi_base;
#endif
};

define GICR_PAGE_MASK	constant = ((1 << 16) - 1);

#if GICV3_HAS_VLPI
// GIC Redistributer stride (four 64k pages per core)
define GICR_STRIDE_SHIFT	constant = 16 + 2;
#else
// GIC Redistributer stride (two 64k pages per core)
define GICR_STRIDE_SHIFT	constant = 16 + 1;
#endif

define GICR_STRIDE_MASK	constant = ((1 << GICR_STRIDE_SHIFT) - 1);

define gicv3_irq_type enumeration {
	sgi;
	ppi;
	spi;
	special;
#if GICv3_EXT_IRQS
	ppi_ext;
	spi_ext;
#endif
#if GICv3_HAS_LPI
	lpi;
#endif
	reserved;
};
