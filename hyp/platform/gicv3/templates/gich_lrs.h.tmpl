// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

static inline ICH_LR_EL2_t
gicv3_read_ich_lr(index_t i, struct asm_ordering_dummy *ordering)
{
	ICH_LR_EL2_t ret;
	assert(i < CPU_GICH_LR_COUNT);
	switch (i) {
#for lr in range(0, $CPU_GICH_LR_COUNT)
	case ${lr}U:
		ret.base = register_ICH_LR${lr}_EL2_base_read_ordered(ordering);
		break;
#end for
	default:
		panic("Out-of-range LR");
		break;
	}

	return ret;
}

static inline void
gicv3_write_ich_lr(index_t i, ICH_LR_EL2_t val,
		   struct asm_ordering_dummy *ordering) {
	assert(i < CPU_GICH_LR_COUNT);
	switch (i) {
#for lr in range(0, $CPU_GICH_LR_COUNT)
	case ${lr}U:
		register_ICH_LR${lr}_EL2_base_write_ordered(val.base, ordering);
		break;
#end for
	default:
		panic("Out-of-range LR");
		break;
	}
}

static inline void
gicv3_read_ich_aprs(uint32_t *ap0rs, uint32_t *ap1rs) {
#for group in (0, 1)
#for i in range(0, $CPU_GICH_APR_COUNT)
	ap${group}rs[$i] = register_ICH_AP${group}R${i}_EL2_read();
#end for
#end for
}

static inline void
gicv3_write_ich_aprs(const uint32_t *ap0rs, const uint32_t *ap1rs) {
	struct asm_ordering_dummy apr_write_ordering;
#for group in (0, 1)
#for i in range(0, $CPU_GICH_APR_COUNT)
	register_ICH_AP${group}R${i}_EL2_write_ordered(ap${group}rs[${i}],
						       &apr_write_ordering);
#end for
#end for
}
