// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

interface vcpu

// Triggered when a VCPU is initialised by a call to vcpu_poweron().
//
// This event is triggered with the scheduler lock for the specified VCPU held
// by the caller. The VCPU is blocked by the SCHEDULER_BLOCK_VCPU_OFF flag.
//
// The valid returns are OK or ERROR_ARGUMENT_INVALID or errors forwarded
// from the PSCI SMC cpu_on call.
setup_event vcpu_poweron
	param vcpu: thread_t *
	return: error_t = OK
	success: OK

// Triggered when a VCPU halts itself by calling vcpu_poweroff().
//
// This event is triggered with the scheduler lock for the current VCPU held
// by the caller. The VCPU will be blocked by the SCHEDULER_BLOCK_VCPU_OFF
// flag after the event completes.
//
// The last_vcpu argument indicates whether this VCPU is expected to be the
// only powered-on VCPU in the VM. If the force argument is not set, handlers
// may assume or assert that the last_vcpu flag is correct, and return
// ERROR_DENIED otherwise.
//
// If the force argument is not set, handlers must return OK. No result other
// than OK or ERROR_DENIED is permitted.
setup_event vcpu_poweroff
	param current: thread_t *
	param last_vcpu: bool
	param force: bool
	return: error_t = OK
	success: OK

// Triggered when a VCPU has stopped execution due to a power-off or halt.
//
// This event is triggered in the context of the VCPU that is stopping, with
// preemption disabled after marking it blocked. Handlers must not enable
// preemption, because the thread will not resume if preempted.
//
// If the VCPU starts again after this event, there will be a vcpu_started
// event with the warm_reset parameter set to false.
event vcpu_stopped

// Triggered when the current VCPU is requesting entry to a virtual low-power
// state. Entry to the low-power state is denied if any registered handler
// returns an error. The error code may be passed on to the VCPU.
//
// This event is triggered with preemption disabled.
//
// Handlers that only want to check for pending wakeup events and return
// ERROR_BUSY should register for vcpu_pending_wakeup instead.
//
// The valid errors for vcpu_suspend are OK, ERROR_DENIED, or ERROR_BUSY.
setup_event vcpu_suspend
	param current: thread_t *
	return: error_t = OK
	success: OK

// Triggered when a VCPU has been woken from a virtual low-power state.
//
// This event is triggered with preemption disabled. Note that this is
// triggered by the resuming VCPU, not directly by the call to vcpu_resume().
//
// In many cases, handlers for this event will be the same as unwinders for
// vcpu_suspend.
event vcpu_resume
	param current: thread_t *

// Triggered when a VCPU is simulating a warm reset.
//
// This event is triggered prior to context-switching to a VCPU that must
// simulate a warm reset, in the process discarding some of its saved register
// state. This is generally a waste of time in both the hypervisor and the VM
// (which must immediately reconstruct the state that is discarded here).
// However, it may be needed for compatibility with power management APIs that
// are not properly hypervisor-aware, e.g. PSCI 1.1 in OS-initiated mode.
//
// Generally this will be similar to the register resetting done in the
// module's vcpu_activate/vcpu_poweroff handlers, but it may be possible to
// take some shortcuts.
event vcpu_warm_reset
	param vcpu: thread_t *

// Triggered when vcpu_wakeup() is called.
//
// This event is triggered with the scheduler lock for the specified VCPU
// held by the caller. The triggering of this is event is not conditional on flags
// being blocked.
event vcpu_wakeup
	param vcpu: thread_t *

// Triggered when vcpu_wakeup_self() is called.
//
// This event is triggered when the caller is runnable, and its scheduler lock
// is not held.
event vcpu_wakeup_self

// Triggered when vcpu_expects_wakeup() is called.
//
// Every module with a vcpu_wakeup() handler should handle this event and
// return true if the vcpu_wakeup() handler would have an effect on the
// specified thread.
handled_event vcpu_expects_wakeup
	param vcpu: const thread_t *

// Triggered when vcpu_pending_wakeup() is called.
//
// Handlers may return true if a wakeup event is pending on the current VCPU.
//
// Returning true from a handler will cause long-running service calls to be
// interrupted, and will also inhibit VCPU suspend (vcpu_suspend will return
// ERROR_BUSY).
//
// This may be called from any context where the caller is a VCPU. That means
// that the calling VCPU's scheduler lock may or may not be held. However,
// preemption must be disabled.
handled_event vcpu_pending_wakeup

// Triggered when vcpu_block_start() is called, after vcpu_pending_wakeup has
// returned false.
//
// Handlers may return true if a wakeup event is pending on the current VCPU,
// in cases where this is only known after reconfiguring the hardware. If the
// wakeup can be detected without reconfiguring hardware, the handler should
// be registered for the vcpu_pending_wakeup event instead.
//
// This can only be called from a VCPU context with preemption disabled.
setup_event vcpu_block_start
	return: bool = false
	success: false

// Triggered when vcpu_block_finish() is called.
event vcpu_block_finish

// Triggered when a VCPU starts execution after a power-off or halt state.
//
// The warm_reset argument is true if the VCPU is completing a warm reset. If
// it is false, then the VCPU is either starting for the first time, or is
// starting after a previous vcpu_stopped event. If it is true, the VCPU had
// been running previously (or was in power-off suspend) and has not executed
// a vcpu_poweroff event.
event vcpu_started
	param warm_reset: bool

// Triggered when vcpu_bind_virq() / vcpu_unbind_virq() are called.
//
// Handlers must be registered by any module that registers a VCPU IRQ type.
// They must call vic_bind_*() / vic_unbind_sync(), respectively, with the
// appropriate VIRQ source object and triggering type.
selector_event vcpu_bind_virq
	selector type: vcpu_virq_type_t
	param vcpu: thread_t *
	param vic: vic_t *
	param virq: virq_t
	return: error_t = ERROR_ARGUMENT_INVALID

selector_event vcpu_unbind_virq
	selector type: vcpu_virq_type_t
	param vcpu: thread_t *
	return: error_t = ERROR_ARGUMENT_INVALID
