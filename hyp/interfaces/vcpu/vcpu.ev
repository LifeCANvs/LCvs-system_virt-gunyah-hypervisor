// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

interface vcpu

// Triggered when a VCPU is initialised by a call to vcpu_poweron().
//
// This event is triggered with the scheduler lock for the specified VCPU held
// by the caller. The VCPU is blocked by the SCHEDULER_BLOCK_VCPU_OFF flag.
event vcpu_poweron
	param vcpu: thread_t *

// Triggered when a VCPU's state is torn down by a call to vcpu_poweroff().
//
// This event is triggered with the scheduler lock for the current VCPU held
// by the caller. The VCPU will be blocked by the SCHEDULER_BLOCK_VCPU_OFF
// flag after the event completes.
//
// The argument force is to override 'soft errors' such as PSCI preventing
// poweroff of the last vCPU in a group.
//
// Additionally, the only valid error returns for vcpu_poweroff handlers are
// OK or ERROR_DENIED.
setup_event vcpu_poweroff
	param force: bool
	return: error_t = OK
	success: OK

// Triggered when a VCPU has completed power off sequence.
//
// This event is triggered without the scheduler lock for the current VCPU
// held by the caller.
event vcpu_poweredoff

// Triggered when the current VCPU is requesting entry to a virtual low-power
// state. Entry to the low-power state is denied if any registered handler
// returns an error. The error code may be passed on to the VCPU.
//
// This event is triggered with the scheduler lock for the current VCPU held
// by the caller.
//
// Handlers that only want to check for pending wakeup events and return
// ERROR_BUSY should register for vcpu_pending_wakeup instead.
//
// The valid errors for vcpu_suspend are OK, ERROR_DENIED, or ERROR_BUSY.
setup_event vcpu_suspend
	return: error_t = OK
	success: OK

// Triggered when the current VCPU is entering to a virtual low-power
// state. This event follows a successful vcpu_suspend setup_event and is
// called without locks held.
event vcpu_suspended

// Triggered when a VCPU has been woken from a virtual low-power state.
//
// This event is triggered with the scheduler lock for the current VCPU
// held by the caller. Note that this is is triggered by the resuming VCPU,
// not directly by the call to vcpu_resume(). Also, note that the scheduler
// lock will have been dropped and re-acquired after the vcpu_suspend event.
//
// In many cases, handlers for this event will be the same as unwinders for
// vcpu_suspend.
event vcpu_resume

// Triggered when a VCPU has completed resume from a virtual low-power state.
//
// This event is triggered without the scheduler lock for the current VCPU
// held by the caller. Note that this is is triggered by the resuming VCPU,
// not directly by the call to vcpu_resume().
event vcpu_resumed

// Triggered when a VCPU is simulating a warm reset.
//
// This event is triggered prior to context-switching to a VCPU that must
// simulate a warm reset, in the process discarding some of its saved register
// state. This is generally a waste of time in both the hypervisor and the VM
// (which must immediately reconstruct the state that is discarded here).
// However, it may be needed for compatibility with power management APIs that
// are not properly hypervisor-aware, e.g. PSCI 1.1 in OS-initiated mode.
//
// Generally this will be similar to the register resetting done in the
// module's vcpu_activate/vcpu_poweroff handlers, but it may be possible to
// take some shortcuts.
event vcpu_warm_reset
	param vcpu: thread_t *

// Triggered when vcpu_wakeup() is called.
//
// This event is triggered with the scheduler lock for the specified VCPU
// held by the caller. The triggering of this is event is not conditional on flags
// being blocked.
event vcpu_wakeup
	param vcpu: thread_t *

// Triggered when vcpu_wakeup_self() is called.
//
// This event is triggered when the caller is runnable, and its scheduler lock
// is not held.
event vcpu_wakeup_self

// Triggered when vcpu_expects_wakeup() is called.
//
// Every module with a vcpu_wakeup() handler should handle this event and
// return true if the vcpu_wakeup() handler would have an effect on the
// specified thread.
handled_event vcpu_expects_wakeup
	param vcpu: const thread_t *

// Triggered when vcpu_pending_wakeup() is called.
//
// Handlers may return true if a wakeup event is pending on the current VCPU.
//
// Returning true from a handler will cause long-running service calls to be
// interrupted, and will also inhibit VCPU suspend (vcpu_suspend will return
// ERROR_BUSY).
//
// This may be called from any context where the caller is a VCPU. That means
// that the calling VCPU's scheduler lock may or may not be held; if not,
// preemption may or may not be enabled. If preemption is disabled, handlers
// should be free of races.
handled_event vcpu_pending_wakeup

// Triggered when vcpu_thread_start() is called
//
// This event is triggered when the VCPU returns from powerdown
event vcpu_started

// Triggered when handling a WFI trap
//
// This event is triggered to follow the idle fastpath, which will cause the
// thread to call idle_yield(). Modules that subscribe to this event can return
// an idle_state different from IDLE if they want to abort the idle fastpath and
// instead continue the normal path that will call scheduler_yield and possibly
// switch to the idle thread.
setup_event vcpu_idle_fastpath
	return: idle_state_t = IDLE_STATE_IDLE
	success: IDLE_STATE_IDLE
