// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

module vgic

subscribe boot_hypervisor_start()
	require_preempt_disabled

subscribe boot_cpu_warm_init()
	require_preempt_disabled

subscribe rootvm_init
	// Run early so other modules can bind VIRQs. Must run after PSCI,
	// which is priority 10.
	priority 1

subscribe rootvm_init_late(root_thread, hyp_env)

subscribe object_create_vic
	priority last

subscribe object_activate_vic

subscribe object_deactivate_vic

subscribe object_cleanup_vic(vic)

subscribe object_create_hwirq

subscribe object_deactivate_hwirq

subscribe object_create_thread

subscribe object_activate_thread
	unwinder vgic_unwind_object_activate_thread(thread)
	// Run early so other modules (timer, etc) can bind to virtual PPIs.
	// Must run after PSCI, which is priority 10.
	priority 1

subscribe object_deactivate_thread

subscribe object_cleanup_thread(thread)

subscribe irq_received[HWIRQ_ACTION_VGIC_FORWARD_SPI]
	handler vgic_handle_irq_received_forward_spi(hwirq)

subscribe irq_received[HWIRQ_ACTION_VGIC_MAINTENANCE]
	handler vgic_handle_irq_received_maintenance()
	require_preempt_disabled

subscribe ipi_received[IPI_REASON_VGIC_ENABLE]
	handler vgic_handle_ipi_received_enable()
	require_preempt_disabled

subscribe ipi_received[IPI_REASON_VGIC_SYNC]
	handler vgic_handle_ipi_received_sync()
	require_preempt_disabled

subscribe ipi_received[IPI_REASON_VGIC_DELIVER]
	handler vgic_handle_ipi_received_deliver()
	require_preempt_disabled

subscribe ipi_received[IPI_REASON_VGIC_SGI]
	handler vgic_handle_ipi_received_sgi()
	require_preempt_disabled

subscribe vic_bind_hwirq[HWIRQ_ACTION_VGIC_FORWARD_SPI]
	handler vgic_bind_hwirq_spi(vic, hwirq, virq)

subscribe vic_unbind_hwirq[HWIRQ_ACTION_VGIC_FORWARD_SPI]
	handler vgic_unbind_hwirq_spi(hwirq)

subscribe virq_set_enabled[VIRQ_TRIGGER_VGIC_FORWARDED_SPI]
	handler vgic_handle_virq_set_enabled_hwirq_spi(source, enabled)

subscribe virq_set_mode[VIRQ_TRIGGER_VGIC_FORWARDED_SPI]
	handler vgic_handle_virq_set_mode_hwirq_spi(source, mode)

subscribe thread_save_state

subscribe thread_context_switch_post(prev)
	// Lowered priority so default priority handlers can restore state
	// that affects virq_check_pending handlers
	priority -100

subscribe thread_load_state()

subscribe scheduler_affinity_changed(thread, next_cpu)

subscribe addrspace_attach_vdevice

subscribe vdevice_access[VDEVICE_TYPE_VGIC_GICD]

subscribe vdevice_access[VDEVICE_TYPE_VGIC_GICR]

subscribe vdevice_access_fixed_addr
	// Raise priority as this is more likely to be performance-critical
	// than other vdevices. This can be removed once we have proper
	// device-kind tracking for vdevices
	priority 1

subscribe vcpu_trap_sysreg_read

subscribe vcpu_trap_sysreg_write
	// Run early, because SGI1R is the most performance-critical sysreg
	// write trap
	priority 100

subscribe vcpu_trap_wfi()
	// Run early, in case we need to trigger a wakeup
	priority 100

subscribe vcpu_pending_wakeup

subscribe vcpu_stopped()

#if VGIC_HAS_LPI && GICV3_HAS_VLPI

// When switching away from a VCPU, deschedule it in the GICR.
subscribe thread_context_switch_pre()
	// Run early, to give vPE descheduling time to complete during the
	// rest of the context switch.
	priority 100
	require_preempt_disabled

// When switching to a VCPU, schedule it in the GICR.
subscribe thread_load_state
	handler vgic_handle_thread_load_state_vpe()
	// Run early, to give vPE scheduling time to complete before we return
	// to userspace.
	priority 100
	require_preempt_disabled

// When blocking for the VCPU, mark the vPE as descheduled. This allows us to
// check for pending vLPIs / vSGIs now, and also to receive a doorbell if one
// arrives later.
subscribe vcpu_block_start()
	unwinder vgic_vpe_schedule_current()
	require_preempt_disabled

subscribe vcpu_block_finish
	handler vgic_vpe_schedule_current()
	require_preempt_disabled

subscribe vcpu_pending_wakeup
	handler vgic_vpe_handle_vcpu_pending_wakeup()
	// Run early, because this is a relatively cheap check and might fail
	// repeatedly.
	priority 100
	require_preempt_disabled

subscribe vcpu_trap_wfi
	handler vgic_vpe_handle_vcpu_trap_wfi()
	// Run early, because this is a relatively cheap check and might fail
	// repeatedly.
	priority 200

#endif // VGIC_HAS_LPI && GICV3_HAS_VLPI
