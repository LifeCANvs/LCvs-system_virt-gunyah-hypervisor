// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

#include <types/bitmap.h>

// The hardware has to support at least 5 priority bits, but might not support
// more. We constrain the implementation to 5 anyway.
define VGIC_PRIO_BITS constant type count_t = 5;
define VGIC_PRIORITIES constant type count_t = 1 << VGIC_PRIO_BITS;

// Low bits to shift out of priority values.
define VGIC_PRIO_SHIFT constant type count_t = 8 - VGIC_PRIO_BITS;

// Chunks to split the IRQ search bitmap into for the SPIs and PPIs (<1020)
define VGIC_LOW_RANGES constant type count_t = 64;

// Upper bound for virtual IRQ IDs. Note that this can be further constrained
// by both the hardware (ICH_VTR_EL2.IDbits) and the VM configuration.
#if !defined(VGIC_LPI_BITS)
// May be set by the configuration to any value between 14 and 24, to
// constrain VGIC memory usage. Default to 16.
define VGIC_LPI_BITS constant type count_t = 16;
#endif
define VGIC_IDBITS constant type count_t =
	VGIC_HAS_LPI ? VGIC_LPI_BITS : VGIC_HAS_EXT_IRQS ? 13 : 10;

#if VGIC_HAS_LPI
define VGIC_LPI_NUM constant type count_t = (1 << VGIC_IDBITS) - GIC_LPI_BASE;
#if !GICV3_HAS_VLPI
define VGIC_LPI_RANGES constant type count_t = BITMAP_NUM_WORDS(VGIC_LPI_NUM);
#endif
#endif

// Delivery state for VIRQs.
//
// This tracks why, how and where the VIRQ is currently being asserted.
//
// It is independent of both the HW IRQ activation state and the list register
// status, and is maintained for all VIRQs that can be listed in LRs,
// regardless of whether they have registered sources or whether they are
// currently listed.
//
// The bits have fixed assignments solely to avoid breaking existing debug
// tools.
define vgic_delivery_state bitfield<32>(set_ops) {
	// Currently in a list register.
	//
	// If the VIRQ is a forwarded SPI and is marked as such in the list
	// register, it must have valid transitions in and out of HW listed
	// state within the same non-preemptible critical sections that set
	// and clear this flag.
	//
	// If this flag is set, the active and pending flags in the GICD &
	// GICR may be wrong; if the VCPU is running then the active and
	// pending flags below may also be wrong. All flags will be updated by
	// the VCPU that has listed the VIRQ prior to clearing this flag. It
	// may also update them at other times while the listed flag is set.
	//
	// This flag may only be set or cleared, and a list register may only
	// be manipulated, by the VCPU owning the list register in question,
	// or by another thread holding that VPCU's lr_lock while it is not
	// running.
	0		listed		bool;

	// IRQ is a forwarded SPI that is known to be active in hardware. This
	// is set when an SPI assertion is received (regardless of whether it
	// is listed), or a forwarded SPI is delisted with HW=1 and active or
	// pending state. It is cleared when a forwarded SPI is listed with
	// HW=1, or manually deasserted or deactivated.
	11		hw_active	bool;

	// Add GICR index so we don't need to broadcast sync IPIs
	// FIXME:

	// An interrupt has been rerouted, disabled or reasserted while it is
	// listed on a VCPU that is current on a remote CPU. The remote CPU
	// should check the VIRQ and delist, deroute or reassert it, then
	// clear this bit and call asm_event_wake_updated().
	//
	// Note that an EOI maintenance interrupt is handled the same way
	// other than that the routing check is skipped.
	//
	// This must only be set if the listed bit is set.
	1		need_sync	bool;

	// The source of a forwarded SPI has been removed while the VIRQ is
	// listed. The LR must be read back and converted to a SW VIRQ, and
	// the HW SPI must be deactivated if it is still active.
	//
	// Note that this is only used as a trigger. Clearing it does not
	// imply synchronisation: the IRQ may not have been deactivated yet
	// when it clears.
	//
	// This must only be set if the listed bit is set.
	2		hw_detached	bool;

	// Currently enabled. If this false, the IRQ should not be asserted on
	// any VCPU.
	3		enabled		bool;

	// Also migrate priority and route to this bitfield.
	// FIXME:

	// The interrupt is currently active. This is only valid for an
	// unlisted interrupt; for a listed interrupt the active state is in
	// the LR. If set, it inhibits re-listing of the interrupt until it
	// is cleared, either via LRENP maintenance triggered by an EOIR write
	// on the VCPU that activated it, or by a trapped write to DIR or
	// ICATIVER on any VCPU.
	4		active		bool;

	// The ICFGR bit 1 for the VIRQ.
	//
	// If this is set and the listed bit is clear, the VIRQ's pending
	// state is the edge bit in this bitfield.
	//
	// If this is set and the listed bit is also set, the VIRQ's pending
	// state is the union of the edge bit in this bitfield and the pending
	// bit in the corresponding list register.
	//
	// If this is clear, the VIRQ's pending state is the union of the
	// level_sw, level_msg and level_src bits in this bitfield. If the
	// listed bit is set, and all three level bits are clear, then any
	// pending state in the corresponding list register is spurious and
	// may be discarded at the next opportunity.
	5		cfg_is_edge	bool;

	// IRQ was asserted by a write to GIC[DR]_ISPENDR. Must remain set
	// until its bit is set in GIC[DR]_ICPENDR.
	6		level_sw	bool;

	// IRQ was asserted by a write to GICD_SETSPI while level-triggered.
	// Must remain set until its IRQ number is written to GICD_CLRSPI.
	7		level_msg	bool;

	// IRQ was asserted by a call to virq_assert(edge_only==false). Must
	// remain set until virq_clear() is called or a handler for the
	// virq_check_pending event returns false.
	8		level_src	bool;

	// IRQ was asserted for any reason, and the assertion is known not to
	// have been acknowledged by a VCPU. This includes all of the above
	// sources, in addition to SGIs (excluding GICv4.1 vSGIs), LPIs
	// (excluding GICv4 vLPIs), and calls to virq_assert(edge_only==true).
	//
	// This bit is cleared when the listed bit is set, because the VCPU
	// may acknowledge the interrupt at any time after that. If the IRQ is
	// delisted while pending, this bit should be set before the listed
	// bit is cleared. Note that this means that an assertion after the
	// VIRQ is listed but before it is acknowledged will be spuriously
	// delivered; this is an unavoidable consequence of the list register
	// model and applies to hardware edges too.
	//
	// Apart from determining the pending state when cfg_is_edge is true,
	// this bit is also passed to the virq_check_pending event to indicate
	// that the interrupt has been reasserted since it was delivered to
	// the VM.
	9		edge		bool;

	// IRQ is in Group 1 (rather than Group 0).
	//
	// This bit is copied into the LR when the VIRQ is listed. Changes
	// after listing the VIRQ are not guaranteed to take effect (as
	// permitted by the GICv3 specification).
	10		group1		bool;

	// Virtual IRQ priority.
	//
	// This field is copied into the LR when the VIRQ is listed. Changes
	// after listing the VIRQ are not guaranteed to take effect (as
	// permitted by the GICv3 specification).
	<VGIC_PRIO_BITS>:16
			priority	uint8 lsl(VGIC_PRIO_SHIFT);

	// Virtual IRQ route.
	//
	// This field stores the currently configured route for the VIRQ, in
	// the form of a virtual GICR index. If VGIC_HAS_1N is enabled and the
	// route_1n flag is set, this may be ignored if a better route is
	// available. Note that we reserve enough bits to be able to represent
	// an out-of-range route ID.
	<msb(PLATFORM_MAX_CORES)+1>:24
			route		type index_t;

#if VGIC_HAS_1N
	// Virtual IRQ 1-of-N mode.
	//
	// This flag is true if the hypervisor should automatically route the
	// IRQ to a VCPU. For forwarded SPIs, this may be passed through to
	// the physical GIC, if the requirements for that are satisfied.
	15		route_1n	bool;

#if GICV3_HAS_GICD_ICLAR
	// CPU classes for physical 1-of-N routing
	//
	// These flags are used to control which physical CPUs can receive a
	// 1-of-N routed physical SPI. They apply only to forwarded SPIs, and
	// are only implemented if the underlying GICD has GICD_ICLAR<n>
	// registers, which are implementation-defined by GIC-600 and GIC-700.
	//
	// The class 0 bit is inverted so that the reset value of 0 means "class
	// enabled", like the corresponding hardware bit, but the class 1 bit
	// is not inverted. Also, unlike the hardware bits, the classes are not
	// reset to disabled and read-only when route_1n is clear.
	13		nclass0		bool;
	14		class1		bool;
#endif // GICV3_HAS_GICD_ICLAR
#endif // VGIC_HAS_1N
};

extend virq_trigger enumeration {
	vgic_forwarded_spi;
};

extend virq_source structure module vgic {
	// Flag to protect against concurrent binding of the source.
	is_bound	bool(atomic);

	// Index of the virtual CPU for a private binding. Invalid if shared.
	gicr_index	type index_t;
};

// HW IRQ extensions for forwarding through the virtual GIC.
//
// Note that forwarded HW IRQs can only be SPIs. PPIs must be processed by
// other modules and converted to registered VIRQs. LPIs and SGIs will be
// converted to unregistered VIRQs if handled in software.
extend hwirq object module vgic {
	// The VIRQ source for forwarded SPIs. It must have trigger set to
	// VIRQ_TRIGGER_VGIC_FORWARDED_SPI.
	spi_source	structure virq_source(contained);

	// A flag indicating that the HW IRQ can be safely enabled. If it is
	// false, then an unbind is in progress, and the HW IRQ should be kept
	// disabled. This is protected by the gicd_lock of the bound VIC.
	enable_hw	bool;
};

extend hwirq_action enumeration {
	vgic_forward_spi;
	vgic_maintenance;
};

// Virtual GICD state is in the stand-alone vic object.
extend vic object {
	// Lock protecting group, priority and routing changes for all SPIs,
	// and registration & enablement of hardware SPIs. Must not be
	// acquired while holding a GICR's attochment or LR ownership lock.
	gicd_lock		structure spinlock;

	// Virtual device structure representing the GICD registers. If the
	// type is set to VDEVICE_TYPE_NONE, it has not been mapped. Mapping
	// is protected by the gicd lock.
	gicd_device		structure vdevice(contained);

	// The current values of the virtual GICD_CTLR and GICD_STATUSR.
	// Updates are serialised by gicd_lock, but GICD_CTLR is atomic so we
	// can read it without taking the lock.
	gicd_ctlr		bitfield GICD_CTLR_DS(atomic);
	gicd_statusr		bitfield GICD_STATUSR;

	// The size of the vcpus array.
	gicr_count		type count_t;
	// The array of VCPUs attached to this GICD. Protected by gicd_lock.
	// Weak references; pointers cleared by thread deactivate.
	gicr_vcpus		pointer pointer(atomic) object thread;

	// The array of shared VIRQ sources attached to this GICD, indexed by
	// VIRQ number minus GIC_SPI_BASE. The attachment pointers are
	// protected by RCU and will be cleared if the corresponding VIRQs are
	// deleted or detached.
	sources			pointer pointer(atomic) structure virq_source;
	// The sources array size; shared VIRQs can only have registered sources
	// if they have valid SPI numbers with an offset less than this count.
	// This is fixed after VIC creation.
	sources_count		type count_t;

	// Assertion states of the SPIs (including those with no sources).
	spi_states		array(GIC_SPI_NUM)
		bitfield vgic_delivery_state(atomic);

#if VGIC_HAS_1N
	// Round-robin counter for virtual SPI delivery decisions.
	rr_start_point		type count_t(atomic);
#endif

#if VGIC_HAS_LPI
	// Maximum supported ID bits. Between 14 and VIC_IDBITS if LPIs are
	// enabled for this VIC; otherwise 10.
	gicd_idbits		type count_t;

	// Virtual GICR_PROPBASER. As per the spec we are allowed to share a
	// single copy of this across all virtual GICRs, since the table it
	// points to is also shared.
	gicr_rd_propbaser	bitfield GICR_PROPBASER(atomic);

	// Cache of the VLPI configurations.
	//
	// This is a pointer to an array of 8-bit configuration fields for the
	// virtual LPIs. Unlike the pending bitmap, there is no reserved space
	// at the start corresponding to non-LPI IRQ numbers.
	//
	// Updates to this cache are not protected by any lock, based on the
	// assumption that parallel updates will be copying from the same
	// source anyway.
	vlpi_config_table	pointer uint8;

	// Validity flag for the vlpi config table.
	//
	// This is set the first time a VCPU enables VLPIs, to indicate that
	// the initial copy of the config table from the VM has been done.
	// Subsequent copies are triggered by invalidate commands.
	//
	// The GICD lock must be held while querying this, and the lock must
	// be held across the initial copy-in of the config table.
	vlpi_config_valid	bool;

#if GICV3_HAS_VLPI_V4_1
	// True if we can use the ITS to deliver virtual SGIs. This is only
	// possible on GICv4.1, and only if this VIC has VLPI tables. Also,
	// because an ITS-delivered SGI is really an LPI and therefore has no
	// active state, this could potentially break the guest; so the guest
	// must enable it by setting the virtual GICD_CTLR.nASSGIreq to 1.
	vsgis_enabled		bool;
#endif
#endif

	// True if we should handle fixed address vdevice accesses. This is
	// temporary and will be removed once we have migrated away from fixed
	// addresses.
	allow_fixed_vmaddr	bool;

	// Lock to serialise unrouted-IRQ searches. This only needs to be held
	// while searching, not when flagging an IRQ in the search bitmaps.
	search_lock		structure spinlock;

	// Cache of VIRQ number ranges that may need to be checked when
	// searching for previously unrouted VIRQs to be delivered. This
	// search occurs when a VCPU is first attached to a VGIC. If
	// 1-of-N delivery is enabled, it also occurs when a group is enabled.
	//
	// Bits are set in this array after an attempt is made to deliver a
	// corresponding IRQ, but no route can be found for it. The write must
	// be release-ordered after the delivery state update.
	//
	// To search for a pending IRQ, the VCPU must find a set bit in the
	// array, clear it with an atomic load-acquire and re-check that it
	// was set, check all the IRQs in the corresponding range, and reset
	// the bit if at least one unrouted pending IRQ was found, regardless
	// of whether that IRQ was claimed by the VCPU. The search lock must
	// be held, to prevent the transient clearing of a bit hiding an IRQ
	// from a concurrent search.
	search_ranges_low	BITMAP(VGIC_LOW_RANGES, atomic);

	// Mapping between GICR indices and 4-level affinity values for
	// MPIDR, GICR_TYPER etc. If not configured explicitly, this defaults
	// to being the same as the underlying hardware's mapping.
	mpidr_mapping		structure platform_mpidr_mapping;
};

extend cap_rights_vic bitfield {
	1	attach_vcpu	bool;
	2	attach_vdevice	bool;
};

// State tracking for a list register.
define vgic_lr_status structure {
	// The listed VIRQ's delivery state. The listed bit should be set.
	// This pointer is NULL if the list register is free.
	dstate		pointer bitfield vgic_delivery_state(atomic);

	// The content of the LR as it was last written to or read from the
	// hardware. Note that this may be out of date if this LR belongs to
	// the current VCPU on some physical CPU.
	lr		union ICH_LR_EL2;
};

define vgic_lr_owner_lock structure(lockable) {
	owner		type cpu_index_t(atomic);
	lock		structure spinlock;
};

// Virtual GICR state is embedded in the associated thread context.
extend thread object module vgic {
	// Reference-counted pointer to the vic that owns this GICR. This
	// cannot change once the thread is activated.
	vic		pointer object vic;
	// Index of this GICR in the register map and attachment array. This
	// cannot change once the thread is activated; it is checked for
	// uniqueness (i.e. no conflicts with other threads) at activation
	// time.
	gicr_index	type index_t;

	// Virtual device structure representing the GICR registers. If the
	// type is set to VDEVICE_TYPE_NONE, it has not been mapped. Mapping
	// is protected by the gicd lock.
	gicr_device		structure vdevice(contained);

	// Flag indicating whether this GICR is the last in a contiguous range
	// of mapped vdevices. This must be set correctly, because the Linux
	// GIC driver relies on it to terminate GICR iterations; it does not
	// check the sizes of the redistributor regions.
	//
	// This is only used for accesses through gicr_device; fixed access
	// uses a hard-coded index check.
	gicr_device_last	bool;

	// Physical route register that should be used to target this thread.
	irouter		bitfield GICD_IROUTER;

	// The array of private VIRQ sources attached to this GICR, indexed by
	// VIRQ number minus GIC_PPI_BASE. The attachment pointers are protected
	// by RCU and will be cleared if the corresponding VIRQs are deleted
	// or detached.
	sources			array(GIC_PPI_NUM) pointer(atomic)
			structure virq_source;

	// Assertion states of the SGIs and PPIs. These are only accessed
	// atomically.
	private_states		array(GIC_SGI_NUM + GIC_PPI_NUM)
		bitfield vgic_delivery_state(atomic);

	// The GICR's rd_base register state.
	gicr_rd_statusr		bitfield GICR_STATUSR(atomic);
#if VGIC_HAS_LPI
	gicr_rd_ctlr		bitfield GICR_CTLR(atomic);
	gicr_rd_pendbaser	bitfield GICR_PENDBASER(atomic);
#endif

	// The ICH EL2 register state. Parts of these are exposed to userspace
	// through the ICV EL1 registers. These are accessed only by the owner
	// thread.
	ich_hcr		bitfield ICH_HCR_EL2;
	ich_vmcr	bitfield ICH_VMCR_EL2;

	// Active priority registers.
	//
	// These are used only for context switching. Writing any value other
	// than 0 or the context-saved value has UNPREDICTABLE behaviour. (In
	// fact, the manual says that writing any value other than 0 or the
	// last value read has UNPREDICTABLE behaviour, but that makes safe
	// context switching impossible, so we assume it's a bad copy-paste
	// from the ICC documentation.)
	ap0rs		array(CPU_GICH_APR_COUNT) uint32;
	ap1rs		array(CPU_GICH_APR_COUNT) uint32;

	// Current state of each of the LRs.
	//
	// Updates to these status structures are protected by a combination
	// of lr_lock and lr_owner. Specifically, the thread acquires lr_lock
	// and sets lr_owner to the physical CPU index during context load,
	// then resets lr_owner to CPU_INDEX_INVALID during context save.
	//
	// Between context switches, the thread that owns this GICR may change
	// the LR state without acquiring the lock, but must update it in the
	// physical LRs as well.
	//
	// Any other thread wishing to update these structures must acquire
	// lr_lock _and_ check that lr_owner is invalid before changing the
	// status; simply holding lr_lock is never enough because the physical
	// LRs cannot be remotely updated (and also because the GICR's thread
	// is allowed to update without holding the lock). If lr_owner is
	// valid, the thread must signal the GICR's owner to perform the
	// desired update rather than doing it directly. For deliveries, this
	// is done with the deliver IPI and the search range flags below; for
	// undeliveries it is done with the need-sync flag in the dstate.
	//
	// The lr_owner variable may also be read without holding the lock, to
	// determine where an IPI targeting this vCPU should be sent, if
	// anywhere. Such a read must be ordered after any delivery state
	// changes with a seq_cst fence.
	lrs		array(CPU_GICH_LR_COUNT) structure vgic_lr_status;
	lr_owner_lock	structure vgic_lr_owner_lock;

	// Current group enable states of the virtual GICR. These are not
	// directly visible to the VCPU, but are kept consistent with the
	// virtual GICD_CTLR and ICV_IGRPEN[01]_EL1.
	//
	// As required by the spec, clearing one of these flags will return
	// all 1-of-N IRQs to the distributor for rerouting; i.e. they will be
	// delisted and kept out of the LRs. To simplify the implementation of
	// both these bits and GICR_WAKER (see below), we do that for all
	// IRQs, 1-of-N or otherwise.
	//
	// There may be a lag between ICV_IGRPEN[01]_EL1 being cleared and
	// the maintenance interrupt showing up to tell us to update these
	// flags. That is OK because the 1-of-N rerouting does not have to be
	// instant, and the other effects are implemented in hardware. The
	// only time we must check that these flags are up-to-date is when a VM
	// reads GICR_WAKER.ChildrenAsleep while ProcessorSleep is set.
	//
	// These flags are protected by the LR lock.
	group0_enabled	bool;
	group1_enabled	bool;

	// Current GICR_WAKER.ProcessorSleep state.
	//
	// The effects of setting this flag are:
	// - selecting the VCPU for a 1-of-N wakeup
	// - short-circuiting delivery checks to wake up without listing
	// - polling group enables on GICR_WAKER.ChildrenAsleep reads
	// - not polling VPE scheduling on GICR_WAKER.ChildrenAsleep reads
	//
	// The spec requires that setting this flag disables all IRQ delivery
	// and returns all IRQs to the distributor. However, it also says that
	// setting this flag when either of the group enables is set has
	// UNPREDICTABLE behaviour, and we already return all IRQs to the
	// distributor when groups are disabled (see above).
	//
	// Therefore it is within spec for this flag to have no direct effect
	// on interrupt delivery. The advantage of doing this is that interrupt
	// delivery will work in VMs that assume they don't have control of
	// GICR_WAKER, like UEFI.
	//
	// This flag does not need any lock protection, but it does need to be
	// atomic as it is read remotely by the 1-of-N wakeup algorithm.
	sleep		bool(atomic);

#if VGIC_HAS_1N
	// Current 1-of-N wakeup request state.
	//
	// This flag is set to true if the VCPU is chosen by the 1-of-N wakeup
	// algorithm while it is not blocked in the EL2 scheduler, and is
	// cleared when GICR_WAKER.ProcessorSleep is changed from 1 to 0. If
	// it is set, the VCPU cannot enter a low-power state.
	//
	// This flag is protected by the scheduler lock.
	wakeup_1n	bool;
#endif

	// Cache of VIRQ numbers that may need to be checked when searching
	// for a pending IRQ to deliver.
	//
	// Bits are set in these arrays after an attempt is made to deliver a
	// corresponding IRQ to the VCPU that fails to immediately list it, or
	// when an IRQ is kicked out of the list registers due to low priority.
	//
	// To search for a pending IRQ of a specific priority, the VCPU must
	// find a set bit in that priority's element in the array, clear it
	// with an atomic load-acquire and re-check that it was set, check all
	// the IRQs in the corresponding range, and reset the bit if the
	// search did not fail (regardless of whether the IRQ found was
	// successfully delivered).
	//
	// Reads of this bitmap when searching must be acquire-ordered before
	// reads of the delivery states. Writes of this bitmap when flagging
	// must be release-ordered after writes of the delivery states.
	search_ranges_low	array(VGIC_PRIORITIES)
		BITMAP(VGIC_LOW_RANGES, atomic);

#if VGIC_HAS_LPI && !GICV3_HAS_VLPI
	// Extended search ranges for software-implemented LPIs.
	search_ranges_lpi	array(VGIC_PRIORITIES)
		BITMAP(VGIC_LPI_RANGES, atomic);
#error Software VLPIs are not implemented yet
#elif VGIC_HAS_LPI && GICV3_HAS_VLPI
	// Cache of the VLPI pending state.
	//
	// This is a pointer to a bitmap with 1 << gicd_idbits bits if LPIs
	// are supported by this VIC, or otherwise NULL. It must be
	// 64k-aligned, due to the 16-bit shift of the physical base in the
	// VMAPP command.
	//
	// The contents of this table are undefined when EnableLPIs is false in
	// gicr_rd_ctlr. When that bit is set to true, this table is either
	// entirely zeroed, or else partially copied from VM memory and the
	// remainder zeroed, depending on the PTZ bit of gicr_rd_pendbaser.
	vlpi_pending_table	pointer uint8;

	// Sequence number of the vPE unmap. Valid only after the VCPU is
	// deactivated while its EnableLPIs bit is true.
	vlpi_unmap_seq		type count_t;

#if GICV3_HAS_VLPI_V4_1
	// Sequence number of the VSYNC following the initial VSGI setup.
	// If this is set to ~0, the VSGI setup commands have not all been
	// enqueued in the ITS yet, and software delivery must be used; if it
	// is set to 0, the setup commands are known to have completed, and
	// polling the ITS is not necessary. Otherwise, software delivery must
	// be used until the specified sequence number is complete.
	vsgi_setup_seq		type count_t(atomic);

	// Sequence number of the VSYNC following the most recent VSGI clear
	// enable operation. This is used to set GICR_CTLR.RWP on trapped reads.
	vsgi_disable_seq	type count_t;
#endif
#endif

	// Cache of shifted priorities that may have nonzero bits in their
	// search ranges.
	//
	// To select a priority to search for, the VCPU must find the least
	// significant set bit in the array, clear it, search for an interrupt
	// of the corresponding priority, and reset the bit if one was found.
	//
	// To search for a pending IRQ of unknown priority, the VCPU must find
	// a set bit in the bitmap, clear it, search the corresponding bitmap
	// in the search_ranges array, and then reset the bit unless the search
	// checked and cleared every bit in the search ranges bitmap.
	//
	// Reads of this bitmap when searching must be acquire-ordered before
	// reads of the search ranges bitmap. Writes of this bitmap when
	// flagging must be release-ordered after writes of the search ranges
	// bitmap.
	search_prios		BITMAP(VGIC_PRIORITIES, atomic);

	// Record of active interrupts that were kicked out of the list
	// registers due to higher-priority pending interrupts.
	//
	// If the VM has EOImode set to 0, this functions as a stack, which is
	// always sorted with highest priority at the top; we know this
	// because we always kick out the lowest priority listed active
	// interrupt, and interrupts can't enter the active state if they are
	// lower-priority than anything already on the stack. This allows us
	// to handle EOIcount!=0 interrupts by popping from the stack.
	//
	// If the VM has EOImode is set to 1, this functions as a write-only
	// ring. We do this because VM EOImode==1 is slow anyway (it has to
	// trap every ICV_DIR_EL1 write) and is rarely used (it's only useful
	// if the VM's kernel forwards IRQs to EL0), and changes to EOImode
	// can't be selectively trapped, so writing unconditionally is better
	// than checking EOImode all the time. Note that VGIC_PRIORITIES is a
	// power of two, so indexing modulo VGIC_PRIORITIES is cheap.
	active_unlisted		array(VGIC_PRIORITIES) type virq_t;
	active_unlisted_count	type count_t;

	// Bitmap of SGIs pending delivery.
	pending_sgis		BITMAP(GIC_SGI_NUM, atomic);
};

extend ipi_reason enumeration {
	vgic_enable;
	vgic_sync;
	vgic_deliver;
	vgic_sgi;
};

extend hyp_env_data structure {
	vic		type cap_id_t;
	gicd_base	type paddr_t;
	gicr_base	type paddr_t;
	gicr_stride	size;

	gits_base	type paddr_t;
	gits_stride	size;
};

#if GICV3_HAS_GICD_ICLAR
define GICD_SETCLASSR bitfield<32> {
	12:0		SPI	type virq_t;
	30		Class0	bool;
	31		Class1	bool;
	others		unknown=0;
};

define OFS_GICD_SETCLASSR constant size = 0x28;
#endif // GICV3_HAS_GICD_ICLAR

define VGIC_PIDR2 constant uint32 = 0x30; // GICv3

define vgic_irq_type enumeration {
	sgi;
	ppi;
	spi;
#if VGIC_HAS_EXT_IRQS
	ppi_ext;
	spi_ext;
#endif
#if VGIC_HAS_LPI
	lpi;
#endif
	reserved;
};

extend trace_class enumeration {
	VGIC = 17;
	VGIC_DEBUG = 18;
};

extend trace_id enumeration {
	VGIC_VIRQ_CHANGED = 0x20;
	VGIC_DSTATE_CHANGED = 0x21;
	VGIC_HWSTATE_CHANGED = 0x22;
	VGIC_HWSTATE_UNCHANGED = 0x23;
	VGIC_GICD_WRITE = 0x24;
	VGIC_GICR_WRITE = 0x25;
	VGIC_SGI = 0x26;
	VGIC_ROUTE = 0x28;
	VGIC_ICC_WRITE = 0x29;
	VGIC_ASYNC_EVENT = 0x2a;
};

extend vdevice_type enumeration {
	vgic_gicd;
	vgic_gicr;
};

define vgic_gicr_attach_flags public bitfield<64> {
	0		last_valid	bool;
	1		last		bool;
	others		unknown=0;
};

extend addrspace_attach_vdevice_flags union {
	vgic_gicr	bitfield vgic_gicr_attach_flags;
};
