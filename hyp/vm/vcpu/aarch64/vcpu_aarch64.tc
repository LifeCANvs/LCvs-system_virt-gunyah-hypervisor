// Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
//
// SPDX-License-Identifier: BSD-3-Clause

define vcpu_gpr structure {
	x		array(31) type register_t(aligned(16));
	pc		bitfield ELR_EL2;
	spsr_el2	union SPSR_EL2;
};

define vector_register_t newtype array(16) uint8();

define vcpu_vfp_registers structure {
	q		array(32) type vector_register_t(aligned(16));
	fpcr		bitfield FPCR;
	fpsr		bitfield FPSR;
};

define vcpu_el1_registers structure {
	contextidr_el1	bitfield CONTEXTIDR_EL1;
	cpacr_el1	bitfield CPACR_EL1;
	csselr_el1	bitfield CSSELR_EL1;
	elr_el1		bitfield ELR_EL1;
	esr_el1		bitfield ESR_EL1;
	far_el1		bitfield FAR_EL1;
	par_el1		union PAR_EL1;
	mair_el1	bitfield MAIR_EL1;
	sp_el0		bitfield SP_EL0;
	sp_el1		bitfield SP_EL1;
	spsr_el1	bitfield SPSR_EL1_A64;
	sctlr_el1	bitfield SCTLR_EL1;
	ttbr0_el1	bitfield TTBR0_EL1;
	ttbr1_el1	bitfield TTBR1_EL1;
	tpidr_el0	bitfield TPIDR_EL0;
	tpidrro_el0	bitfield TPIDRRO_EL0;
	tpidr_el1	bitfield TPIDR_EL1;
	tcr_el1		bitfield TCR_EL1;
	vbar_el1	bitfield VBAR_EL1;
#if defined(ARCH_ARM_FEAT_CSV2_2) || defined(ARCH_ARM_FEAT_CSV2_1p2) || \
	defined(ARCH_ARM_FEAT_CSV2_3)
	scxtnum_el0	uint64;
	scxtnum_el1	uint64;
#endif
#if !defined(CPU_HAS_NO_ACTLR_EL1)
	actlr_el1	bitfield ACTLR_EL1;
#endif
#if !defined(CPU_HAS_NO_AMAIR_EL1)
	amair_el1	bitfield AMAIR_EL1;
#endif
#if !defined(CPU_HAS_NO_AFSR0_EL1)
	afsr0_el1	bitfield AFSR0_EL1;
#endif
#if !defined(CPU_HAS_NO_AFSR1_EL1)
	afsr1_el1	bitfield AFSR1_EL1;
#endif
};

define vcpu_el2_registers structure {
#if defined(ARCH_ARM_FEAT_VHE)
	cptr_el2	bitfield CPTR_EL2_E2H1;
#else
	cptr_el2	bitfield CPTR_EL2_E2H0;
#endif
	hcr_el2		bitfield HCR_EL2;
	mdcr_el2	bitfield MDCR_EL2;
};

extend vcpu object {
	gpr	structure vcpu_gpr(group(context_switch, registers, a));
#if defined(ARCH_ARM_FEAT_PAuth)
	pauth	structure aarch64_pauth_keys(group(context_switch, registers, b));
#endif
	fpr	structure vcpu_vfp_registers(group(context_switch, registers, c));
	el1	structure vcpu_el1_registers(group(context_switch, registers, d));
	el2	structure vcpu_el2_registers(group(context_switch, registers, e));

	mpidr_el1	bitfield MPIDR_EL1(group(context_switch, registers, d));
#if SCHEDULER_CAN_MIGRATE
	midr_el1	bitfield MIDR_EL1(group(context_switch, registers, d));
#endif
};

#if !defined(PREEMPT_NULL)
extend vcpu_runtime_flags bitfield {
	auto	vcpu_interrupted	bool = 0;
	auto	vcpu_can_idle		bool = 0;
};
#endif

#if defined(INTERFACE_VCPU_RUN)
extend vcpu_run_wakeup_from_state enumeration {
	// VCPU is halted by a trapped WFI instruction.
	wfi = 1;
};
#endif
